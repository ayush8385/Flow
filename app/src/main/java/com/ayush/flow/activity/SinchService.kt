package com.ayush.flow.activityimport android.app.Serviceimport android.content.Intentimport android.os.Binderimport android.os.IBinderimport android.util.Logimport com.google.firebase.auth.FirebaseAuthimport com.sinch.android.rtc.*import com.sinch.android.rtc.calling.Callimport com.sinch.android.rtc.calling.CallClientimport com.sinch.android.rtc.calling.CallClientListenerclass SinchService : Service(){    private val mSinchServiceInterface: SinchServiceInterface = SinchServiceInterface()    private var mSinchClient: SinchClient? = null    var userName: String? = null        private set    private var mListener: StartFailedListener? = null    override fun onCreate() {        val firebaseUser=FirebaseAuth.getInstance().currentUser        start(firebaseUser!!.uid)        super.onCreate()    }    override fun onDestroy() {        if (mSinchClient != null && mSinchClient!!.isStarted) {            mSinchClient!!.terminate()        }        super.onDestroy()    }    private fun start(userName: String) {        if (mSinchClient == null) {            this.userName = userName            mSinchClient =                Sinch.getSinchClientBuilder().context(getApplicationContext()).userId(userName)                    .applicationKey(APP_KEY)                    .applicationSecret(APP_SECRET)                    .environmentHost(ENVIRONMENT).build()            mSinchClient!!.setSupportCalling(true)            mSinchClient!!.startListeningOnActiveConnection()            mSinchClient!!.addSinchClientListener(MySinchClientListener())            mSinchClient!!.getCallClient().addCallClientListener(SinchCallClientListener())            mSinchClient!!.start()        }    }    private fun stop() {        if (mSinchClient != null) {            mSinchClient!!.terminate()            mSinchClient = null        }    }    private val isStarted: Boolean        private get() = mSinchClient != null && mSinchClient!!.isStarted    override fun onBind(intent: Intent?): IBinder {        return mSinchServiceInterface    }    inner class SinchServiceInterface : Binder() {        fun callPhoneNumber(phoneNumber: String?): Call {            return mSinchClient!!.callClient.callPhoneNumber(phoneNumber)        }        fun callUser(userId: String?): Call {            return mSinchClient!!.callClient.callUser(userId)        }        fun callUser(userId: String?, headers: Map<String?, String?>?): Call {            return mSinchClient!!.callClient.callUser(userId, headers)        }        val isStarted: Boolean            get() = this@SinchService.isStarted        fun startClient(userName: String) {            start(userName)        }        fun stopClient() {            stop()        }        fun setStartListener(listener: StartFailedListener?) {            mListener = listener        }        fun getCall(callId: String?): Call {            return mSinchClient!!.callClient.getCall(callId)        }        fun muteCall() {            mSinchClient!!.audioController.mute()        }        fun unmuteCall() {            mSinchClient!!.audioController.unmute()        }        fun onSpeaker() {            mSinchClient!!.audioController.enableSpeaker()        }        fun offSpeaker() {            mSinchClient!!.audioController.disableSpeaker()        }    }    interface StartFailedListener {        fun onStartFailed(error: SinchError?)        fun onStarted()    }    private inner class MySinchClientListener : SinchClientListener {        override fun onClientFailed(client: SinchClient, error: SinchError) {            if (mListener != null) {                mListener!!.onStartFailed(error)            }            mSinchClient!!.terminate()            mSinchClient = null        }        override fun onClientStarted(client: SinchClient) {            Log.d(TAG, "SinchClient started")            if (mListener != null) {                mListener!!.onStarted()            }        }        override fun onClientStopped(client: SinchClient) {            Log.d(TAG, "SinchClient stopped")        }        override fun onLogMessage(level: Int, area: String, message: String) {            when (level) {                Log.DEBUG -> Log.d(area, message)                Log.ERROR -> Log.e(area, message)                Log.INFO -> Log.i(area, message)                Log.VERBOSE -> Log.v(area, message)                Log.WARN -> Log.w(area, message)            }        }        override fun onRegistrationCredentialsRequired(client: SinchClient, clientRegistration: ClientRegistration) {        }    }    inner class SinchCallClientListener : CallClientListener {        override fun onIncomingCall(callClient: CallClient?, call: Call) {            Log.d(TAG, "Incoming call")            val intent = Intent(this@SinchService, Calling::class.java)            intent.putExtra(CALL_ID, call.getCallId())            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)            startActivity(intent)        }    }    companion object {        private val APP_KEY = "144a64d5-4b85-45a4-9b67-e7e8d5bca164"        private val APP_SECRET = "EHXpXse6cU2qf6NVFGXmpA=="        private val ENVIRONMENT = "clientapi.sinch.com"        const val LOCATION = "LOCATION"        const val CALL_ID = "CALL_ID"        val TAG = SinchService::class.java.simpleName    }}